#!/bin/bash

function show_usage() {
	echo "Dupro - Duplicity Profile"
	echo
	echo "USAGE:"
	echo 
	echo "  dupro <profile> <command> [options]"
	echo "  dupro <profile> restore <directory> [options]"
	echo "  dupro <profile> remove-older-than <time> [options]"
	echo "  dupro <profile> remove-all-but-n-full <count> [options]"
	echo "  dupro <profile> remove-all-inc-of-but-n-full <count> [options]"
	echo
	echo "EXAMPLE:"
	echo 
	echo "  dupro myprofile full"
	echo "  dupro myprofile incremental --full-if-older-than 30D"
	echo "  dupro myprofile restore /where/to/restore/to"
	echo "  dupro myprofile remove-older-than 30D"
	echo
}

function die() {
	echo "ERROR: $@" > /dev/stderr
	exit 1
}

function is_argument() {
	ARG="$1"
	if [ -z "$ARG" -o "${ARG:0:1}" = '-' ]; then
		# This is empty, or looks like an option, so return false.
		return 1
	fi
	return 0
}

# Create and/or reset permissions on the ~/.dupro directory.
USER_PROFILE_DIR="$HOME/.dupro"
if [ ! -e "$USER_PROFILE_DIR" ]; then
	mkdir "$USER_PROFILE_DIR"
fi
chmod 700 "$USER_PROFILE_DIR"

# Check if we have enough arguments to run.
if [ "$#" -lt 2 ]; then
	show_usage
	die "Not enough arguments."
fi

if ! is_argument "$1" || ! is_argument "$2"; then
	show_usage
	die "The first 2 arguments must not be options."
fi

# Get arguments and options.
PROFILE="$1"; shift;
COMMAND="$1"; shift;
# A couple commands take an extra argument.
case $COMMAND in
	restore|remove-*)
		EXTRA_ARGUMENT="$1"; shift;
		if !  is_argument "$EXTRA_ARGUMENT"; then
			show_usage
			die "With the $COMMAND command, the 3rd argument is required and must not be an option."
		fi
		;;
esac
EXTRA_OPTIONS="$@"

# Default config values.
SOURCE=""
TARGET=""
DUPLICITY_OPTIONS=""
DUPLICITY_BACKUP_OPTIONS=""

#
# Read the profile.
#

PROFILE_PATH="$USER_PROFILE_DIR/$PROFILE"
if [ ! -f "$PROFILE_PATH" ]; then
	die "No such profile: $PROFILE_PATH"
fi
. "$PROFILE_PATH"

if [ -z "$SOURCE" ]; then
	die "Profile doesn't set SOURCE variable"
fi

if [ -z "$TARGET" ]; then
	die "Profile doesn't set TARGET variable"
fi

#
# Run duplicity
#

case $COMMAND in
	full|incr|incremental)
		exec duplicity $COMMAND $DUPLICITY_OPTIONS $DUPLICITY_BACKUP_OPTIONS $EXTRA_OPTIONS $SOURCE $TARGET
		;;

	verify)
		exec duplicity verify $DUPLICITY_OPTIONS $EXTRA_OPTIONS $TARGET $SOURCE
		;;

	restore)
		exec duplicity restore $DUPLICITY_OPTIONS $EXTRA_OPTIONS $TARGET $EXTRA_ARGUMENT
		;;

	remove-*)
		exec duplicity $COMMAND $EXTRA_ARGUMENT $DUPLICITY_OPTIONS $EXTRA_OPTIONS $TARGET
		;;

	*)
		exec duplicity $COMMAND $DUPLICITY_OPTIONS $EXTRA_OPTIONS $TARGET
		;;
esac

